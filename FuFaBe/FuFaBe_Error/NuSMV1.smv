
MODULE _VARS
	VAR
		V_CommunicationMedium : {L_Idle, L_MSG_Close, L_MSG_Request, L_MSG_Response};
		V_TrainRadioSender : {L_Idle, L_SendCloseSignal, L_SendRequest};
		V_CrossingRadioSender : {L_Idle, L_SendResponse};
		V_F06_CommunicationMedium : {L_NO, L_Loss, L_FalseReport};
		V_Constants : {L_Idle};
		V_z : {50};
		V_c : {3};
		V_sp_pos : {-20};
		V_Crossing : {L_Opened, L_Closing, L_Closed, L_Opening};
		V_Angle : 0..90;
		V_ClosingTime : {6};
		V_CrossingMotor : {L_Off, L_Down, L_Up};
		V_CrossingControl : {L_Idle, L_Closing, L_Opening, L_Closed, L_Opened};
		V_CrossingRadioReceiver : {L_Idle, L_ReceiveClose, L_ReceiveRequest};
		V_CrossingSensor : {L_Opened, L_Closed, L_Moving};
		V_Timer : {L_Idle, L_Tick, L_Timeout};
		V_OpeningSensor : {L_Idle, L_Waitng, L_Open};
		V_F03_CrossingMotor : {L_NO, L_DoNotWork, L_OutOfControl};
		V_EmergencyBreak : {L_Off, L_On};
		V_BrakeIterator : 0..2;
		V_Deceleration : {1};
		V_TrainControl : {L_Idle, L_EP, L_AP, L_BEP, L_Stop, L_Go};
		V_Speed : 0..9;
		V_F01_EmergencyBrake : {L_NO, L_YES};
		V_F01 : boolean;
		V_F02_TrainRadioReceiver : {L_NO, L_Loss, L_FalseReport};
		V_F02 : boolean;
		V_F03 : boolean;
		V_F04_OpeningSensor : {L_NO, L_YES};
		V_F04 : boolean;
		V_F05_TrainOdometer : {L_NO, L_YES};
		V_F05 : boolean;
		V_F06 : boolean;
		V_FailureController : {L_Idle};
		V_Position : -100..400;
		V_Time : 0..30;
		V_SignalClosedCrossing : boolean;
		V_TrainOdometer : {L_Away, L_EP, L_AP, L_BEP, L_GP, L_SP, L_OutOfScope};
		V_TrainRadioReceiver : {L_Idle, L_ReceiveResponse};
		V_TrainMotion : {L_Moving, L_Stopping};
		V_VisitSCS : boolean;
		V_VisitSR : boolean;
	TRANS
		next(V_z) = V_z & next(V_c) = V_c & next(V_sp_pos) = V_sp_pos & next(V_ClosingTime) = V_ClosingTime & next(V_Deceleration) = V_Deceleration & next(V_F01) = V_F01 & next(V_F02) = V_F02 & next(V_F03) = V_F03 & next(V_F04) = V_F04 & next(V_F05) = V_F05 & next(V_F06) = V_F06;
MODULE _P_CommunicationMedium(v)
	INIT
		(v.V_CommunicationMedium = L_Idle) & (TRUE)
	TRANS
		 ( v.V_CommunicationMedium = L_Idle & next(v.V_CommunicationMedium) = L_MSG_Close & ((v.V_TrainRadioSender = L_SendCloseSignal) | (v.V_F06_CommunicationMedium = L_FalseReport)) & (TRUE))  |
		 ( v.V_CommunicationMedium = L_Idle & next(v.V_CommunicationMedium) = L_MSG_Request & ((v.V_TrainRadioSender = L_SendRequest) | (v.V_F06_CommunicationMedium = L_FalseReport)) & (TRUE))  |
		 ( v.V_CommunicationMedium = L_Idle & next(v.V_CommunicationMedium) = L_MSG_Response & ((v.V_CrossingRadioSender = L_SendResponse) | (v.V_F06_CommunicationMedium = L_FalseReport)) & (TRUE))  |
		 ( v.V_CommunicationMedium = L_Idle & next(v.V_CommunicationMedium) = L_Idle & (v.V_F06_CommunicationMedium = L_Loss) & (TRUE))  |
		 ( v.V_CommunicationMedium = L_MSG_Close & next(v.V_CommunicationMedium) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_CommunicationMedium = L_MSG_Request & next(v.V_CommunicationMedium) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_CommunicationMedium = L_MSG_Response & next(v.V_CommunicationMedium) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_CommunicationMedium = L_Idle & next(v.V_CommunicationMedium) = L_Idle & (!((v.V_TrainRadioSender = L_SendCloseSignal) | (v.V_F06_CommunicationMedium = L_FalseReport)) & (!((v.V_TrainRadioSender = L_SendRequest) | (v.V_F06_CommunicationMedium = L_FalseReport)) & (!((v.V_CrossingRadioSender = L_SendResponse) | (v.V_F06_CommunicationMedium = L_FalseReport)) & !(v.V_F06_CommunicationMedium = L_Loss)))) & (TRUE));
MODULE _P_Constants(v)
	INIT
		(v.V_Constants = L_Idle) & (TRUE)
	TRANS
		 ( v.V_Constants = L_Idle & next(v.V_Constants) = L_Idle & TRUE & (TRUE));
MODULE _P_Crossing(v)
	INIT
		(v.V_Crossing = L_Opened) & ((v.V_Angle = 90))
	TRANS
		 ( v.V_Crossing = L_Opened & next(v.V_Crossing) = L_Closing & (v.V_CrossingMotor = L_Down) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Crossing = L_Closing & next(v.V_Crossing) = L_Closed & (v.V_Angle = 0) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Crossing = L_Closing & next(v.V_Crossing) = L_Closing & (((v.V_CrossingMotor = L_Down) & (v.V_Angle > 0)) & (v.V_Angle >= 15)) & (next(v.V_Angle) = (v.V_Angle - 15)))  |
		 ( v.V_Crossing = L_Closed & next(v.V_Crossing) = L_Opening & (v.V_CrossingMotor = L_Up) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Crossing = L_Opening & next(v.V_Crossing) = L_Opened & (v.V_Angle = 90) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Crossing = L_Opening & next(v.V_Crossing) = L_Opening & (((v.V_CrossingMotor = L_Up) & (v.V_Angle < 90)) & ((v.V_Angle + 15) <= 90)) & (next(v.V_Angle) = (v.V_Angle + 15)))  |
		 ( v.V_Crossing = L_Opened & next(v.V_Crossing) = L_Opened & !(v.V_CrossingMotor = L_Down) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Crossing = L_Closing & next(v.V_Crossing) = L_Closing & (!(v.V_Angle = 0) & !(((v.V_CrossingMotor = L_Down) & (v.V_Angle > 0)) & (v.V_Angle >= 15))) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Crossing = L_Closed & next(v.V_Crossing) = L_Closed & !(v.V_CrossingMotor = L_Up) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Crossing = L_Opening & next(v.V_Crossing) = L_Opening & (!(v.V_Angle = 90) & !(((v.V_CrossingMotor = L_Up) & (v.V_Angle < 90)) & ((v.V_Angle + 15) <= 90))) & (next(v.V_Angle) = v.V_Angle));
MODULE _P_CrossingControl(v)
	INIT
		(v.V_CrossingControl = L_Idle) & (TRUE)
	TRANS
		 ( v.V_CrossingControl = L_Idle & next(v.V_CrossingControl) = L_Closing & (v.V_CrossingRadioReceiver = L_ReceiveClose) & (TRUE))  |
		 ( v.V_CrossingControl = L_Closing & next(v.V_CrossingControl) = L_Closed & (v.V_CrossingSensor = L_Closed) & (TRUE))  |
		 ( v.V_CrossingControl = L_Opening & next(v.V_CrossingControl) = L_Opened & (v.V_CrossingSensor = L_Opened) & (TRUE))  |
		 ( v.V_CrossingControl = L_Closed & next(v.V_CrossingControl) = L_Opening & ((v.V_OpeningSensor = L_Open) | (v.V_Timer = L_Timeout)) & (TRUE))  |
		 ( v.V_CrossingControl = L_Opened & next(v.V_CrossingControl) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_CrossingControl = L_Idle & next(v.V_CrossingControl) = L_Idle & !(v.V_CrossingRadioReceiver = L_ReceiveClose) & (TRUE))  |
		 ( v.V_CrossingControl = L_Closing & next(v.V_CrossingControl) = L_Closing & !(v.V_CrossingSensor = L_Closed) & (TRUE))  |
		 ( v.V_CrossingControl = L_Opening & next(v.V_CrossingControl) = L_Opening & !(v.V_CrossingSensor = L_Opened) & (TRUE))  |
		 ( v.V_CrossingControl = L_Closed & next(v.V_CrossingControl) = L_Closed & !((v.V_OpeningSensor = L_Open) | (v.V_Timer = L_Timeout)) & (TRUE));
MODULE _P_CrossingMotor(v)
	INIT
		(v.V_CrossingMotor = L_Off) & (TRUE)
	TRANS
		 ( v.V_CrossingMotor = L_Off & next(v.V_CrossingMotor) = L_Down & (((v.V_CrossingControl = L_Closing) & (v.V_F03_CrossingMotor = L_NO)) | (v.V_F03_CrossingMotor = L_OutOfControl)) & (TRUE))  |
		 ( v.V_CrossingMotor = L_Off & next(v.V_CrossingMotor) = L_Up & (((v.V_CrossingControl = L_Opening) & (v.V_F03_CrossingMotor = L_NO)) | (v.V_F03_CrossingMotor = L_OutOfControl)) & (TRUE))  |
		 ( v.V_CrossingMotor = L_Off & next(v.V_CrossingMotor) = L_Off & (v.V_F03_CrossingMotor = L_DoNotWork) & (TRUE))  |
		 ( v.V_CrossingMotor = L_Down & next(v.V_CrossingMotor) = L_Off & (v.V_CrossingControl = L_Closed) & (TRUE))  |
		 ( v.V_CrossingMotor = L_Up & next(v.V_CrossingMotor) = L_Off & (v.V_CrossingControl = L_Opened) & (TRUE))  |
		 ( v.V_CrossingMotor = L_Off & next(v.V_CrossingMotor) = L_Off & (!(((v.V_CrossingControl = L_Closing) & (v.V_F03_CrossingMotor = L_NO)) | (v.V_F03_CrossingMotor = L_OutOfControl)) & (!(((v.V_CrossingControl = L_Opening) & (v.V_F03_CrossingMotor = L_NO)) | (v.V_F03_CrossingMotor = L_OutOfControl)) & !(v.V_F03_CrossingMotor = L_DoNotWork))) & (TRUE))  |
		 ( v.V_CrossingMotor = L_Down & next(v.V_CrossingMotor) = L_Down & !(v.V_CrossingControl = L_Closed) & (TRUE))  |
		 ( v.V_CrossingMotor = L_Up & next(v.V_CrossingMotor) = L_Up & !(v.V_CrossingControl = L_Opened) & (TRUE));
MODULE _P_CrossingRadioReceiver(v)
	INIT
		(v.V_CrossingRadioReceiver = L_Idle) & (TRUE)
	TRANS
		 ( v.V_CrossingRadioReceiver = L_Idle & next(v.V_CrossingRadioReceiver) = L_ReceiveClose & (v.V_CommunicationMedium = L_MSG_Close) & (TRUE))  |
		 ( v.V_CrossingRadioReceiver = L_Idle & next(v.V_CrossingRadioReceiver) = L_ReceiveRequest & (v.V_CommunicationMedium = L_MSG_Request) & (TRUE))  |
		 ( v.V_CrossingRadioReceiver = L_ReceiveClose & next(v.V_CrossingRadioReceiver) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_CrossingRadioReceiver = L_ReceiveRequest & next(v.V_CrossingRadioReceiver) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_CrossingRadioReceiver = L_Idle & next(v.V_CrossingRadioReceiver) = L_Idle & (!(v.V_CommunicationMedium = L_MSG_Close) & !(v.V_CommunicationMedium = L_MSG_Request)) & (TRUE));
MODULE _P_CrossingRadioSender(v)
	INIT
		(v.V_CrossingRadioSender = L_Idle) & (TRUE)
	TRANS
		 ( v.V_CrossingRadioSender = L_Idle & next(v.V_CrossingRadioSender) = L_SendResponse & (v.V_CrossingControl = L_Closed) & (TRUE))  |
		 ( v.V_CrossingRadioSender = L_SendResponse & next(v.V_CrossingRadioSender) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_CrossingRadioSender = L_Idle & next(v.V_CrossingRadioSender) = L_Idle & !(v.V_CrossingControl = L_Closed) & (TRUE));
MODULE _P_CrossingSensor(v)
	INIT
		(v.V_CrossingSensor = L_Opened) & (TRUE)
	TRANS
		 ( v.V_CrossingSensor = L_Opened & next(v.V_CrossingSensor) = L_Moving & (v.V_Crossing = L_Closing) & (TRUE))  |
		 ( v.V_CrossingSensor = L_Closed & next(v.V_CrossingSensor) = L_Moving & (v.V_Crossing = L_Opening) & (TRUE))  |
		 ( v.V_CrossingSensor = L_Moving & next(v.V_CrossingSensor) = L_Closed & (v.V_Crossing = L_Closed) & (TRUE))  |
		 ( v.V_CrossingSensor = L_Moving & next(v.V_CrossingSensor) = L_Opened & (v.V_Crossing = L_Opened) & (TRUE))  |
		 ( v.V_CrossingSensor = L_Opened & next(v.V_CrossingSensor) = L_Opened & !(v.V_Crossing = L_Closing) & (TRUE))  |
		 ( v.V_CrossingSensor = L_Closed & next(v.V_CrossingSensor) = L_Closed & !(v.V_Crossing = L_Opening) & (TRUE))  |
		 ( v.V_CrossingSensor = L_Moving & next(v.V_CrossingSensor) = L_Moving & (!(v.V_Crossing = L_Closed) & !(v.V_Crossing = L_Opened)) & (TRUE));
MODULE _P_EmergencyBreak(v)
	INIT
		(v.V_EmergencyBreak = L_Off) & ((v.V_BrakeIterator = 0))
	TRANS
		 ( v.V_EmergencyBreak = L_Off & next(v.V_EmergencyBreak) = L_On & ((v.V_TrainControl = L_Stop) & (v.V_F01_EmergencyBrake = L_NO)) & (next(v.V_BrakeIterator) = v.V_BrakeIterator & next(v.V_Speed) = v.V_Speed))  |
		 ( v.V_EmergencyBreak = L_Off & next(v.V_EmergencyBreak) = L_Off & (v.V_F01_EmergencyBrake = L_YES) & (next(v.V_BrakeIterator) = v.V_BrakeIterator & next(v.V_Speed) = v.V_Speed))  |
		 ( v.V_EmergencyBreak = L_On & next(v.V_EmergencyBreak) = L_On & (((v.V_BrakeIterator < 2) & (v.V_F01_EmergencyBrake = L_NO)) & (v.V_BrakeIterator < 2)) & (next(v.V_BrakeIterator) = (v.V_BrakeIterator + 1) & next(v.V_Speed) = v.V_Speed))  |
		 ( v.V_EmergencyBreak = L_On & next(v.V_EmergencyBreak) = L_On & ((((v.V_BrakeIterator = 2) & (v.V_Speed > 0)) & (v.V_F01_EmergencyBrake = L_NO)) & ((v.V_BrakeIterator = 2) & (v.V_Speed > 0))) & (next(v.V_BrakeIterator) = 0 & next(v.V_Speed) = (v.V_Speed - 1)))  |
		 ( v.V_EmergencyBreak = L_On & next(v.V_EmergencyBreak) = L_Off & (v.V_F01_EmergencyBrake = L_YES) & (next(v.V_BrakeIterator) = v.V_BrakeIterator & next(v.V_Speed) = v.V_Speed))  |
		 ( v.V_EmergencyBreak = L_Off & next(v.V_EmergencyBreak) = L_Off & (!((v.V_TrainControl = L_Stop) & (v.V_F01_EmergencyBrake = L_NO)) & !(v.V_F01_EmergencyBrake = L_YES)) & (next(v.V_BrakeIterator) = v.V_BrakeIterator & next(v.V_Speed) = v.V_Speed))  |
		 ( v.V_EmergencyBreak = L_On & next(v.V_EmergencyBreak) = L_On & (!(((v.V_BrakeIterator < 2) & (v.V_F01_EmergencyBrake = L_NO)) & (v.V_BrakeIterator < 2)) & (!((((v.V_BrakeIterator = 2) & (v.V_Speed > 0)) & (v.V_F01_EmergencyBrake = L_NO)) & ((v.V_BrakeIterator = 2) & (v.V_Speed > 0))) & !(v.V_F01_EmergencyBrake = L_YES))) & (next(v.V_BrakeIterator) = v.V_BrakeIterator & next(v.V_Speed) = v.V_Speed));
MODULE _P_F01_EmergencyBrake(v)
	INIT
		(v.V_F01_EmergencyBrake = L_NO) & (TRUE)
	TRANS
		 ( v.V_F01_EmergencyBrake = L_NO & next(v.V_F01_EmergencyBrake) = L_YES & (v.V_F01 = TRUE) & (TRUE))  |
		 ( v.V_F01_EmergencyBrake = L_NO & next(v.V_F01_EmergencyBrake) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F01_EmergencyBrake = L_YES & next(v.V_F01_EmergencyBrake) = L_YES & TRUE & (TRUE));
MODULE _P_F02_TrainRadioReceiver(v)
	INIT
		(v.V_F02_TrainRadioReceiver = L_NO) & (TRUE)
	TRANS
		 ( v.V_F02_TrainRadioReceiver = L_NO & next(v.V_F02_TrainRadioReceiver) = L_Loss & (v.V_F02 = TRUE) & (TRUE))  |
		 ( v.V_F02_TrainRadioReceiver = L_NO & next(v.V_F02_TrainRadioReceiver) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F02_TrainRadioReceiver = L_NO & next(v.V_F02_TrainRadioReceiver) = L_FalseReport & (v.V_F02 = TRUE) & (TRUE))  |
		 ( v.V_F02_TrainRadioReceiver = L_Loss & next(v.V_F02_TrainRadioReceiver) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F02_TrainRadioReceiver = L_Loss & next(v.V_F02_TrainRadioReceiver) = L_Loss & TRUE & (TRUE))  |
		 ( v.V_F02_TrainRadioReceiver = L_FalseReport & next(v.V_F02_TrainRadioReceiver) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F02_TrainRadioReceiver = L_FalseReport & next(v.V_F02_TrainRadioReceiver) = L_FalseReport & TRUE & (TRUE));
MODULE _P_F03_CrossingMotor(v)
	INIT
		(v.V_F03_CrossingMotor = L_NO) & (TRUE)
	TRANS
		 ( v.V_F03_CrossingMotor = L_NO & next(v.V_F03_CrossingMotor) = L_DoNotWork & (v.V_F03 = TRUE) & (TRUE))  |
		 ( v.V_F03_CrossingMotor = L_NO & next(v.V_F03_CrossingMotor) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F03_CrossingMotor = L_NO & next(v.V_F03_CrossingMotor) = L_OutOfControl & (v.V_F03 = TRUE) & (TRUE))  |
		 ( v.V_F03_CrossingMotor = L_OutOfControl & next(v.V_F03_CrossingMotor) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F03_CrossingMotor = L_OutOfControl & next(v.V_F03_CrossingMotor) = L_OutOfControl & TRUE & (TRUE))  |
		 ( v.V_F03_CrossingMotor = L_DoNotWork & next(v.V_F03_CrossingMotor) = L_DoNotWork & TRUE & (TRUE));
MODULE _P_F04_OpeningSensor(v)
	INIT
		(v.V_F04_OpeningSensor = L_NO) & (TRUE)
	TRANS
		 ( v.V_F04_OpeningSensor = L_NO & next(v.V_F04_OpeningSensor) = L_YES & (v.V_F04 = TRUE) & (TRUE))  |
		 ( v.V_F04_OpeningSensor = L_NO & next(v.V_F04_OpeningSensor) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F04_OpeningSensor = L_YES & next(v.V_F04_OpeningSensor) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F04_OpeningSensor = L_YES & next(v.V_F04_OpeningSensor) = L_YES & TRUE & (TRUE));
MODULE _P_F05_TrainOdometer(v)
	INIT
		(v.V_F05_TrainOdometer = L_NO) & (TRUE)
	TRANS
		 ( v.V_F05_TrainOdometer = L_NO & next(v.V_F05_TrainOdometer) = L_YES & (v.V_F05 = TRUE) & (TRUE))  |
		 ( v.V_F05_TrainOdometer = L_NO & next(v.V_F05_TrainOdometer) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F05_TrainOdometer = L_YES & next(v.V_F05_TrainOdometer) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F05_TrainOdometer = L_YES & next(v.V_F05_TrainOdometer) = L_YES & TRUE & (TRUE));
MODULE _P_F06_CommunicationMedium(v)
	INIT
		(v.V_F06_CommunicationMedium = L_NO) & (TRUE)
	TRANS
		 ( v.V_F06_CommunicationMedium = L_NO & next(v.V_F06_CommunicationMedium) = L_Loss & (v.V_F06 = TRUE) & (TRUE))  |
		 ( v.V_F06_CommunicationMedium = L_NO & next(v.V_F06_CommunicationMedium) = L_FalseReport & (v.V_F06 = TRUE) & (TRUE))  |
		 ( v.V_F06_CommunicationMedium = L_NO & next(v.V_F06_CommunicationMedium) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F06_CommunicationMedium = L_Loss & next(v.V_F06_CommunicationMedium) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F06_CommunicationMedium = L_Loss & next(v.V_F06_CommunicationMedium) = L_Loss & TRUE & (TRUE))  |
		 ( v.V_F06_CommunicationMedium = L_FalseReport & next(v.V_F06_CommunicationMedium) = L_NO & TRUE & (TRUE))  |
		 ( v.V_F06_CommunicationMedium = L_FalseReport & next(v.V_F06_CommunicationMedium) = L_FalseReport & TRUE & (TRUE));
MODULE _P_FailureController(v)
	INIT
		(v.V_FailureController = L_Idle) & (((((((v.V_F01 = TRUE) & (v.V_F02 = TRUE)) & (v.V_F03 = TRUE)) & (v.V_F04 = TRUE)) & (v.V_F05 = TRUE)) & (v.V_F06 = TRUE)))
	TRANS
		 ( v.V_FailureController = L_Idle & next(v.V_FailureController) = L_Idle & TRUE & (TRUE));
MODULE _P_OpeningSensor(v)
	INIT
		(v.V_OpeningSensor = L_Idle) & (TRUE)
	TRANS
		 ( v.V_OpeningSensor = L_Idle & next(v.V_OpeningSensor) = L_Waitng & ((v.V_Position = 0) | (v.V_F04_OpeningSensor = L_YES)) & (TRUE))  |
		 ( v.V_OpeningSensor = L_Idle & next(v.V_OpeningSensor) = L_Open & (v.V_F04_OpeningSensor = L_YES) & (TRUE))  |
		 ( v.V_OpeningSensor = L_Waitng & next(v.V_OpeningSensor) = L_Open & ((v.V_Position <= v.V_sp_pos) | (v.V_F04_OpeningSensor = L_YES)) & (TRUE))  |
		 ( v.V_OpeningSensor = L_Waitng & next(v.V_OpeningSensor) = L_Waitng & (v.V_Position > v.V_sp_pos) & (TRUE))  |
		 ( v.V_OpeningSensor = L_Open & next(v.V_OpeningSensor) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_OpeningSensor = L_Idle & next(v.V_OpeningSensor) = L_Idle & (!((v.V_Position = 0) | (v.V_F04_OpeningSensor = L_YES)) & !(v.V_F04_OpeningSensor = L_YES)) & (TRUE))  |
		 ( v.V_OpeningSensor = L_Waitng & next(v.V_OpeningSensor) = L_Waitng & (!((v.V_Position <= v.V_sp_pos) | (v.V_F04_OpeningSensor = L_YES)) & !(v.V_Position > v.V_sp_pos)) & (TRUE));
MODULE _P_Timer(v)
	INIT
		(v.V_Timer = L_Idle) & (TRUE)
	TRANS
		 ( v.V_Timer = L_Idle & next(v.V_Timer) = L_Tick & (v.V_CrossingControl = L_Closed) & (next(v.V_Time) = 30))  |
		 ( v.V_Timer = L_Tick & next(v.V_Timer) = L_Idle & (v.V_CrossingControl = L_Opening) & (next(v.V_Time) = v.V_Time))  |
		 ( v.V_Timer = L_Tick & next(v.V_Timer) = L_Timeout & (v.V_Time = 0) & (next(v.V_Time) = v.V_Time))  |
		 ( v.V_Timer = L_Tick & next(v.V_Timer) = L_Tick & ((v.V_CrossingControl = L_Closed) & (v.V_Time >= 1)) & (next(v.V_Time) = (v.V_Time - 1)))  |
		 ( v.V_Timer = L_Idle & next(v.V_Timer) = L_Idle & !(v.V_CrossingControl = L_Closed) & (next(v.V_Time) = v.V_Time))  |
		 ( v.V_Timer = L_Tick & next(v.V_Timer) = L_Tick & (!(v.V_CrossingControl = L_Opening) & (!(v.V_Time = 0) & !((v.V_CrossingControl = L_Closed) & (v.V_Time >= 1)))) & (next(v.V_Time) = v.V_Time))  |
		 ( v.V_Timer = L_Timeout & next(v.V_Timer) = L_Timeout & TRUE & (next(v.V_Time) = v.V_Time));
MODULE _P_TrainControl(v)
	INIT
		(v.V_TrainControl = L_Idle) & ((v.V_SignalClosedCrossing = FALSE))
	TRANS
		 ( v.V_TrainControl = L_Idle & next(v.V_TrainControl) = L_EP & (v.V_TrainOdometer = L_EP) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_EP & next(v.V_TrainControl) = L_AP & (v.V_TrainOdometer = L_AP) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_AP & next(v.V_TrainControl) = L_BEP & (v.V_TrainOdometer = L_BEP) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_AP & next(v.V_TrainControl) = L_AP & ((v.V_TrainRadioReceiver = L_ReceiveResponse) & (v.V_SignalClosedCrossing = FALSE)) & (next(v.V_SignalClosedCrossing) = TRUE))  |
		 ( v.V_TrainControl = L_BEP & next(v.V_TrainControl) = L_Stop & (v.V_SignalClosedCrossing = FALSE) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_BEP & next(v.V_TrainControl) = L_Go & (v.V_SignalClosedCrossing = TRUE) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_Idle & next(v.V_TrainControl) = L_Idle & !(v.V_TrainOdometer = L_EP) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_EP & next(v.V_TrainControl) = L_EP & !(v.V_TrainOdometer = L_AP) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_AP & next(v.V_TrainControl) = L_AP & (!(v.V_TrainOdometer = L_BEP) & !((v.V_TrainRadioReceiver = L_ReceiveResponse) & (v.V_SignalClosedCrossing = FALSE))) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_BEP & next(v.V_TrainControl) = L_BEP & (!(v.V_SignalClosedCrossing = FALSE) & !(v.V_SignalClosedCrossing = TRUE)) & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_Stop & next(v.V_TrainControl) = L_Stop & TRUE & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing))  |
		 ( v.V_TrainControl = L_Go & next(v.V_TrainControl) = L_Go & TRUE & (next(v.V_SignalClosedCrossing) = v.V_SignalClosedCrossing));
MODULE _P_TrainMotion(v)
	INIT
		(v.V_TrainMotion = L_Moving) & (((v.V_Position = 400) & (v.V_Speed = 9)))
	TRANS
		 ( v.V_TrainMotion = L_Moving & next(v.V_TrainMotion) = L_Moving & ((v.V_Speed > 0) & (v.V_Position > (-100 + v.V_Speed))) & (next(v.V_Position) = (v.V_Position - v.V_Speed)))  |
		 ( v.V_TrainMotion = L_Moving & next(v.V_TrainMotion) = L_Stopping & (v.V_Speed = 0) & (next(v.V_Position) = v.V_Position))  |
		 ( v.V_TrainMotion = L_Moving & next(v.V_TrainMotion) = L_Moving & (!((v.V_Speed > 0) & (v.V_Position > (-100 + v.V_Speed))) & !(v.V_Speed = 0)) & (next(v.V_Position) = v.V_Position))  |
		 ( v.V_TrainMotion = L_Stopping & next(v.V_TrainMotion) = L_Stopping & TRUE & (next(v.V_Position) = v.V_Position));
MODULE _P_TrainOdometer(v)
	INIT
		(v.V_TrainOdometer = L_Away) & (TRUE)
	TRANS
		 ( v.V_TrainOdometer = L_Away & next(v.V_TrainOdometer) = L_EP & ((v.V_Position <= ((((v.V_Speed * (v.V_ClosingTime + v.V_c)) + ((2 * v.V_c) * v.V_Speed)) + v.V_z) + ((((v.V_Speed * v.V_Speed) * 3) / 2) * v.V_Deceleration))) | (v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_EP & next(v.V_TrainOdometer) = L_AP & ((v.V_Position <= ((((2 * v.V_c) * v.V_Speed) + v.V_z) + ((((v.V_Speed * v.V_Speed) * 3) / 2) * v.V_Deceleration))) | (v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_EP & next(v.V_TrainOdometer) = L_EP & (v.V_F05_TrainOdometer = L_YES) & (TRUE))  |
		 ( v.V_TrainOdometer = L_AP & next(v.V_TrainOdometer) = L_BEP & ((v.V_Position <= (v.V_z + ((((v.V_Speed * v.V_Speed) * 3) / 2) * v.V_Deceleration))) | (v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_AP & next(v.V_TrainOdometer) = L_AP & (v.V_F05_TrainOdometer = L_YES) & (TRUE))  |
		 ( v.V_TrainOdometer = L_BEP & next(v.V_TrainOdometer) = L_GP & ((v.V_Position <= 0) | (v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_BEP & next(v.V_TrainOdometer) = L_BEP & (v.V_F05_TrainOdometer = L_YES) & (TRUE))  |
		 ( v.V_TrainOdometer = L_GP & next(v.V_TrainOdometer) = L_SP & ((v.V_Position <= v.V_sp_pos) | (v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_GP & next(v.V_TrainOdometer) = L_GP & (v.V_F05_TrainOdometer = L_YES) & (TRUE))  |
		 ( v.V_TrainOdometer = L_SP & next(v.V_TrainOdometer) = L_OutOfScope & ((v.V_Position <= -50) | (v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_SP & next(v.V_TrainOdometer) = L_SP & (v.V_F05_TrainOdometer = L_YES) & (TRUE))  |
		 ( v.V_TrainOdometer = L_Away & next(v.V_TrainOdometer) = L_Away & !((v.V_Position <= ((((v.V_Speed * (v.V_ClosingTime + v.V_c)) + ((2 * v.V_c) * v.V_Speed)) + v.V_z) + ((((v.V_Speed * v.V_Speed) * 3) / 2) * v.V_Deceleration))) | (v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_EP & next(v.V_TrainOdometer) = L_EP & (!((v.V_Position <= ((((2 * v.V_c) * v.V_Speed) + v.V_z) + ((((v.V_Speed * v.V_Speed) * 3) / 2) * v.V_Deceleration))) | (v.V_F05_TrainOdometer = L_YES)) & !(v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_AP & next(v.V_TrainOdometer) = L_AP & (!((v.V_Position <= (v.V_z + ((((v.V_Speed * v.V_Speed) * 3) / 2) * v.V_Deceleration))) | (v.V_F05_TrainOdometer = L_YES)) & !(v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_BEP & next(v.V_TrainOdometer) = L_BEP & (!((v.V_Position <= 0) | (v.V_F05_TrainOdometer = L_YES)) & !(v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_GP & next(v.V_TrainOdometer) = L_GP & (!((v.V_Position <= v.V_sp_pos) | (v.V_F05_TrainOdometer = L_YES)) & !(v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_SP & next(v.V_TrainOdometer) = L_SP & (!((v.V_Position <= -50) | (v.V_F05_TrainOdometer = L_YES)) & !(v.V_F05_TrainOdometer = L_YES)) & (TRUE))  |
		 ( v.V_TrainOdometer = L_OutOfScope & next(v.V_TrainOdometer) = L_OutOfScope & TRUE & (TRUE));
MODULE _P_TrainRadioReceiver(v)
	INIT
		(v.V_TrainRadioReceiver = L_Idle) & (TRUE)
	TRANS
		 ( v.V_TrainRadioReceiver = L_Idle & next(v.V_TrainRadioReceiver) = L_ReceiveResponse & (((v.V_CommunicationMedium = L_MSG_Response) & (v.V_F02_TrainRadioReceiver = L_NO)) | (v.V_F02_TrainRadioReceiver = L_FalseReport)) & (TRUE))  |
		 ( v.V_TrainRadioReceiver = L_Idle & next(v.V_TrainRadioReceiver) = L_Idle & (v.V_F02_TrainRadioReceiver = L_Loss) & (TRUE))  |
		 ( v.V_TrainRadioReceiver = L_ReceiveResponse & next(v.V_TrainRadioReceiver) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_TrainRadioReceiver = L_Idle & next(v.V_TrainRadioReceiver) = L_Idle & (!(((v.V_CommunicationMedium = L_MSG_Response) & (v.V_F02_TrainRadioReceiver = L_NO)) | (v.V_F02_TrainRadioReceiver = L_FalseReport)) & !(v.V_F02_TrainRadioReceiver = L_Loss)) & (TRUE));
MODULE _P_TrainRadioSender(v)
	INIT
		(v.V_TrainRadioSender = L_Idle) & (((v.V_VisitSCS = FALSE) & (v.V_VisitSR = FALSE)))
	TRANS
		 ( v.V_TrainRadioSender = L_Idle & next(v.V_TrainRadioSender) = L_SendCloseSignal & ((v.V_TrainControl = L_EP) & (v.V_VisitSCS = FALSE)) & (next(v.V_VisitSCS) = v.V_VisitSCS & next(v.V_VisitSR) = v.V_VisitSR))  |
		 ( v.V_TrainRadioSender = L_Idle & next(v.V_TrainRadioSender) = L_SendRequest & ((v.V_TrainControl = L_AP) & (v.V_VisitSR = FALSE)) & (next(v.V_VisitSCS) = v.V_VisitSCS & next(v.V_VisitSR) = v.V_VisitSR))  |
		 ( v.V_TrainRadioSender = L_SendCloseSignal & next(v.V_TrainRadioSender) = L_Idle & TRUE & (next(v.V_VisitSCS) = TRUE & next(v.V_VisitSR) = v.V_VisitSR))  |
		 ( v.V_TrainRadioSender = L_SendRequest & next(v.V_TrainRadioSender) = L_Idle & TRUE & (next(v.V_VisitSR) = TRUE & next(v.V_VisitSCS) = v.V_VisitSCS))  |
		 ( v.V_TrainRadioSender = L_Idle & next(v.V_TrainRadioSender) = L_Idle & (!((v.V_TrainControl = L_EP) & (v.V_VisitSCS = FALSE)) & !((v.V_TrainControl = L_AP) & (v.V_VisitSR = FALSE))) & (next(v.V_VisitSCS) = v.V_VisitSCS & next(v.V_VisitSR) = v.V_VisitSR));
MODULE main
	VAR
		v : _VARS();
		p_CommunicationMedium : _P_CommunicationMedium(v);
		p_Constants : _P_Constants(v);
		p_Crossing : _P_Crossing(v);
		p_CrossingControl : _P_CrossingControl(v);
		p_CrossingMotor : _P_CrossingMotor(v);
		p_CrossingRadioReceiver : _P_CrossingRadioReceiver(v);
		p_CrossingRadioSender : _P_CrossingRadioSender(v);
		p_CrossingSensor : _P_CrossingSensor(v);
		p_EmergencyBreak : _P_EmergencyBreak(v);
		p_F01_EmergencyBrake : _P_F01_EmergencyBrake(v);
		p_F02_TrainRadioReceiver : _P_F02_TrainRadioReceiver(v);
		p_F03_CrossingMotor : _P_F03_CrossingMotor(v);
		p_F04_OpeningSensor : _P_F04_OpeningSensor(v);
		p_F05_TrainOdometer : _P_F05_TrainOdometer(v);
		p_F06_CommunicationMedium : _P_F06_CommunicationMedium(v);
		p_FailureController : _P_FailureController(v);
		p_OpeningSensor : _P_OpeningSensor(v);
		p_Timer : _P_Timer(v);
		p_TrainControl : _P_TrainControl(v);
		p_TrainMotion : _P_TrainMotion(v);
		p_TrainOdometer : _P_TrainOdometer(v);
		p_TrainRadioReceiver : _P_TrainRadioReceiver(v);
		p_TrainRadioSender : _P_TrainRadioSender(v);


 


-- Check: the crossing cannot be in a State non-closed, when the traincontrol signals the position GP
CTLSPEC AG !((v.V_Crossing != L_Closed) & (v.V_Position <= 0 & v.V_Position > -9)) 

-- Check: Communication of different message types between sender and receiver
LTLSPEC F(v.V_TrainRadioSender = L_SendCloseSignal) 
CTLSPEC AG ((v.V_TrainRadioSender = L_SendCloseSignal) -> AX(AX(v.V_CrossingRadioReceiver = L_ReceiveClose)))
CTLSPEC AG ((v.V_TrainRadioSender = L_SendRequest) -> AX(AX(v.V_CrossingRadioReceiver = L_ReceiveRequest)))
CTLSPEC AG ((v.V_CrossingRadioSender = L_SendResponse) -> AX(AX(v.V_TrainRadioReceiver = L_ReceiveResponse)))

--LTLSPEC F ((v.V_CrossingRadioSender = L_SendResponse) & X X(v.V_TrainRadioReceiver = L_ReceiveResponse))

-- Check: Wenn die Schranke einen "Request" bekommen hat, sendet sie auch irgendwann einen "Response"
LTLSPEC G ((v.V_CrossingRadioReceiver = L_ReceiveClose) -> F (v.V_CrossingRadioSender = L_SendResponse))

-- Check: If train reaches SP, then the crossing will open sometime.
LTLSPEC G (v.V_TrainControl = L_Go) -> F (v.V_Crossing = L_Opened)

-- Check: The train must send messages at the EP and AP. 
LTLSPEC F(v.V_TrainControl = L_EP)
LTLSPEC F(v.V_TrainControl = L_AP)
LTLSPEC G (v.V_TrainControl = L_EP) -> F (v.V_TrainRadioSender = L_SendCloseSignal)
LTLSPEC G (v.V_TrainControl = L_AP) -> F (v.V_TrainRadioSender = L_SendRequest)

-- Check: gibt es einen Pfad, auf dem der Zug einen Request empfaengt?
CTLSPEC EF(v.V_TrainRadioReceiver = L_ReceiveResponse)

-- Check: wenn die Zug-Steuerung in den Zustand "Stop" geht, muss die Notbremse (im naechsten Step) aktiv sein
LTLSPEC G (v.V_TrainControl = L_Stop) -> X (v.V_EmergencyBreak = L_On)

-- Check: OpeningSensor im Zustand Open -> es oeffnet sich daraufhin die Schranke
LTLSPEC G ((v.V_OpeningSensor = L_Open & v.V_CrossingControl = L_Closed) -> X(v.V_CrossingControl = L_Opening))

-- Check: nach Timer-Ablauf oeffnet sich daraufhin die Schranke
LTLSPEC G ((v.V_Timer = L_Timeout & v.V_CrossingControl = L_Closed) -> X(v.V_CrossingControl = L_Opening))

-- Check: Geschwindigkeit wird nie erhoeht (ueber kompletten Verlauf hinweg)
-- CTLSPEC AG (v.V_Speed >= AX v.V_Speed)